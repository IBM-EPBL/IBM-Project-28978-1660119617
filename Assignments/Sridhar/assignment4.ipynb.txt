{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0aa035fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import the libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d7edacc7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import tensorflow\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM, Dense, Dropout, Embedding\n",
    "from tensorflow.keras.optimizers import RMSprop\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing import sequence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "21aaf640",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>v1</th>\n",
       "      <th>v2</th>\n",
       "      <th>Unnamed: 2</th>\n",
       "      <th>Unnamed: 3</th>\n",
       "      <th>Unnamed: 4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ham</td>\n",
       "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ham</td>\n",
       "      <td>Ok lar... Joking wif u oni...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>spam</td>\n",
       "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ham</td>\n",
       "      <td>U dun say so early hor... U c already then say...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ham</td>\n",
       "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     v1                                                 v2 Unnamed: 2  \\\n",
       "0   ham  Go until jurong point, crazy.. Available only ...        NaN   \n",
       "1   ham                      Ok lar... Joking wif u oni...        NaN   \n",
       "2  spam  Free entry in 2 a wkly comp to win FA Cup fina...        NaN   \n",
       "3   ham  U dun say so early hor... U c already then say...        NaN   \n",
       "4   ham  Nah I don't think he goes to usf, he lives aro...        NaN   \n",
       "\n",
       "  Unnamed: 3 Unnamed: 4  \n",
       "0        NaN        NaN  \n",
       "1        NaN        NaN  \n",
       "2        NaN        NaN  \n",
       "3        NaN        NaN  \n",
       "4        NaN        NaN  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(r'C:\\Users\\acer\\Downloads\\archive\\spam.csv',delimiter=',',encoding='latin-1')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0ba1a97f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5572 entries, 0 to 5571\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   v1      5572 non-null   object\n",
      " 1   v2      5572 non-null   object\n",
      "dtypes: object(2)\n",
      "memory usage: 87.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], axis=1, inplace=True)\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0fe6f2f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.v2\n",
    "Y = df.v1\n",
    "encoder = LabelEncoder()\n",
    "Y = encoder.fit_transform(Y)\n",
    "Y = Y.reshape(-1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "055b1279",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)\n",
    "tokenizer = Tokenizer(num_words=2000, lower=True)\n",
    "tokenizer.fit_on_texts(x_train)\n",
    "sequences = tokenizer.texts_to_sequences(x_train)\n",
    "x_train = sequence.pad_sequences(sequences, maxlen=200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc795f7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3a2db606",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f37f756",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Add layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f480ea95",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Embedding(2000, 50, input_length=200))\n",
    "model.add(LSTM(64))\n",
    "model.add(Dense(256, activation=\"relu\"))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(1,activation=\"sigmoid\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9709900f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding (Embedding)       (None, 200, 50)           100000    \n",
      "                                                                 \n",
      " lstm (LSTM)                 (None, 64)                29440     \n",
      "                                                                 \n",
      " dense (Dense)               (None, 256)               16640     \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 256)               0         \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1)                 257       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 146,337\n",
      "Trainable params: 146,337\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33cb0dff",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Compile the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b3274fdb",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss='binary_crossentropy',optimizer=RMSprop(),metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2fe899ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fit the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e4eb6ce1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "25/25 [==============================] - 5s 194ms/step - loss: 0.0023 - accuracy: 0.9997 - val_loss: 0.1033 - val_accuracy: 0.9873\n",
      "Epoch 2/25\n",
      "25/25 [==============================] - 5s 195ms/step - loss: 0.0016 - accuracy: 0.9997 - val_loss: 0.1132 - val_accuracy: 0.9888\n",
      "Epoch 3/25\n",
      "25/25 [==============================] - 5s 197ms/step - loss: 0.0022 - accuracy: 0.9997 - val_loss: 0.1048 - val_accuracy: 0.9888\n",
      "Epoch 4/25\n",
      "25/25 [==============================] - 5s 199ms/step - loss: 0.0014 - accuracy: 0.9997 - val_loss: 0.1245 - val_accuracy: 0.9895\n",
      "Epoch 5/25\n",
      "25/25 [==============================] - 5s 193ms/step - loss: 0.0023 - accuracy: 0.9994 - val_loss: 0.0974 - val_accuracy: 0.9903\n",
      "Epoch 6/25\n",
      "25/25 [==============================] - 5s 198ms/step - loss: 0.0016 - accuracy: 0.9997 - val_loss: 0.1020 - val_accuracy: 0.9895\n",
      "Epoch 7/25\n",
      "25/25 [==============================] - 5s 202ms/step - loss: 0.0013 - accuracy: 0.9994 - val_loss: 0.1057 - val_accuracy: 0.9858\n",
      "Epoch 8/25\n",
      "25/25 [==============================] - 5s 195ms/step - loss: 0.0011 - accuracy: 0.9994 - val_loss: 0.1137 - val_accuracy: 0.9888\n",
      "Epoch 9/25\n",
      "25/25 [==============================] - 5s 200ms/step - loss: 0.0016 - accuracy: 0.9997 - val_loss: 0.1219 - val_accuracy: 0.9858\n",
      "Epoch 10/25\n",
      "25/25 [==============================] - 5s 204ms/step - loss: 0.0015 - accuracy: 0.9997 - val_loss: 0.1288 - val_accuracy: 0.9858\n",
      "Epoch 11/25\n",
      "25/25 [==============================] - 6s 236ms/step - loss: 0.0016 - accuracy: 0.9997 - val_loss: 0.1347 - val_accuracy: 0.9858\n",
      "Epoch 12/25\n",
      "25/25 [==============================] - 5s 205ms/step - loss: 0.0013 - accuracy: 0.9997 - val_loss: 0.1380 - val_accuracy: 0.9865\n",
      "Epoch 13/25\n",
      "25/25 [==============================] - 5s 206ms/step - loss: 0.0017 - accuracy: 0.9997 - val_loss: 0.1427 - val_accuracy: 0.9858\n",
      "Epoch 14/25\n",
      "25/25 [==============================] - 5s 203ms/step - loss: 0.0010 - accuracy: 0.9997 - val_loss: 0.1505 - val_accuracy: 0.9858\n",
      "Epoch 15/25\n",
      "25/25 [==============================] - 5s 214ms/step - loss: 0.0013 - accuracy: 0.9997 - val_loss: 0.1527 - val_accuracy: 0.9865\n",
      "Epoch 16/25\n",
      "25/25 [==============================] - 6s 260ms/step - loss: 0.0013 - accuracy: 0.9997 - val_loss: 0.1504 - val_accuracy: 0.9873\n",
      "Epoch 17/25\n",
      "25/25 [==============================] - 6s 245ms/step - loss: 0.0081 - accuracy: 0.9981 - val_loss: 0.1646 - val_accuracy: 0.9851\n",
      "Epoch 18/25\n",
      "25/25 [==============================] - 5s 216ms/step - loss: 0.0014 - accuracy: 0.9997 - val_loss: 0.1617 - val_accuracy: 0.9858\n",
      "Epoch 19/25\n",
      "25/25 [==============================] - 6s 225ms/step - loss: 0.0012 - accuracy: 0.9997 - val_loss: 0.1602 - val_accuracy: 0.9858\n",
      "Epoch 20/25\n",
      "25/25 [==============================] - 6s 233ms/step - loss: 0.0015 - accuracy: 0.9997 - val_loss: 0.1546 - val_accuracy: 0.9873\n",
      "Epoch 21/25\n",
      "25/25 [==============================] - 6s 231ms/step - loss: 0.0010 - accuracy: 0.9997 - val_loss: 0.1543 - val_accuracy: 0.9865\n",
      "Epoch 22/25\n",
      "25/25 [==============================] - 5s 207ms/step - loss: 0.0016 - accuracy: 0.9997 - val_loss: 0.1498 - val_accuracy: 0.9873\n",
      "Epoch 23/25\n",
      "25/25 [==============================] - 5s 199ms/step - loss: 0.0011 - accuracy: 0.9997 - val_loss: 0.1574 - val_accuracy: 0.9880\n",
      "Epoch 24/25\n",
      "25/25 [==============================] - 5s 208ms/step - loss: 0.0023 - accuracy: 0.9997 - val_loss: 0.1453 - val_accuracy: 0.9873\n",
      "Epoch 25/25\n",
      "25/25 [==============================] - 5s 214ms/step - loss: 0.0012 - accuracy: 0.9997 - val_loss: 0.1483 - val_accuracy: 0.9873\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x247c3d81d00>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train, batch_size=128, epochs=25, validation_split=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d5d1a7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Save the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c9e8e7cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"spam.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "910b20f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Test the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8c47e4df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35/35 [==============================] - 2s 65ms/step - loss: 0.1871 - accuracy: 0.9839\n"
     ]
    }
   ],
   "source": [
    "test_sequences = tokenizer.texts_to_sequences(x_test)\n",
    "x_test = sequence.pad_sequences(test_sequences, maxlen=200)\n",
    "acc = model.evaluate(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4cf532a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(message):\n",
    "    txt = tokenizer.texts_to_sequences(message)\n",
    "    txt = sequence.pad_sequences(txt, maxlen=200)\n",
    "    preds = model.predict(txt)\n",
    "    if preds > 0.5:\n",
    "        print(\"Spam\")\n",
    "    else:\n",
    "        print(\"Not Spam\")      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4e0acd46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 1s 859ms/step\n",
      "Not Spam\n"
     ]
    }
   ],
   "source": [
    "predict([\"Sorry, I will speak to you later\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c3eecf81",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 28ms/step\n",
      "Not Spam\n"
     ]
    }
   ],
   "source": [
    "predict([\"Lol you are always so convincing\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c27e489f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 20ms/step\n",
      "Spam\n"
     ]
    }
   ],
   "source": [
    "predict([\"WIN a year supply of CDs 4 a store of ur choice worth å£500 & enter our å£100 Weekly draw txt MUSIC to 87066 Ts&Cs www.Ldew.com.subs16+1win150ppmx3\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43314e0a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}